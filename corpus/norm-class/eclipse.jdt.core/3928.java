copyright ibm corporation rights reserved program accompanying materials terms eclipse license accompanies distribution http eclipse org legal epl html contributors ibm corporation initial api implementation step hen stephen herrmann stephan berlin contributions bug compiler report status expressions analyze simultaneously bug report variable assignment bug conditional expression conditionalexpression null status nullstatus doesn account analysis condition bug conditional redundant condition yields weak error message bug warning missing resources bug compiler compiler misidentifies variable bug compiler syntactic analysis field references bug compiler diagnostic bug compiler apply annotation types analysis bug follow type annotations bug bug massage type annotated analysis gel deep encoded type bindings bug compiler inference infrastructure evolve meet jls jsr spec bug verify error verifyerror conditional expression passed argument bug compiler npe org eclipse jdt internal compiler ast conditional expression conditionalexpression generate code generatecode conditional expression conditionalexpression java bug type annotation analysis poly conditional expressions bug compiler resolution errors don surface bug compiler incorrect warning primitive type org eclipse jdt internal compiler ast org eclipse jdt internal compiler ast expression context expressioncontext org eclipse jdt internal compiler ast visitor astvisitor org eclipse jdt internal compiler impl org eclipse jdt internal compiler class fmt classfmt class file constants classfileconstants org eclipse jdt internal compiler codegen org eclipse jdt internal compiler flow org eclipse jdt internal compiler lookup conditional expression conditionalexpression operator expression operatorexpression i poly expression ipolyexpression expression condition value if true valueiftrue value if false valueiffalse constant optimized boolean constant optimizedbooleanconstant constant optimized if true constant optimizediftrueconstant constant optimized if false constant optimizediffalseconstant local variables table attributes true init state index trueinitstateindex false init state index falseinitstateindex merged init state index mergedinitstateindex compute store status analyse code analysecode https bugs eclipse org null status nullstatus flow info flowinfo unknown if false null status iffalsenullstatus if true null status iftruenullstatus type binding typebinding expected type expectedtype expression context expressioncontext expression context expressioncontext vanilla context is poly expression ispolyexpression type binding typebinding original value if true type originalvalueiftruetype type binding typebinding original value if false type originalvalueiffalsetype specifics conditional expression conditionalexpression expression condition expression value if true valueiftrue expression value if false valueiffalse condition condition value if true valueiftrue value if true valueiftrue value if false valueiffalse value if false valueiffalse source start sourcestart condition source start sourcestart source end sourceend value if false valueiffalse source end sourceend flow info flowinfo analyse code analysecode block scope blockscope current scope currentscope flow context flowcontext flow context flowcontext flow info flowinfo flow info flowinfo initial comp laint level initialcomplaintlevel flow info flowinfo reach mode reachmode flow info flowinfo unreachable statement complained fake reachable statement complained constant cst condition optimized boolean constant optimizedbooleanconstant is condition optimized true isconditionoptimizedtrue cst constant notaconstant cst boolean value booleanvalue is condition optimized false isconditionoptimizedfalse cst constant notaconstant cst boolean value booleanvalue mode flow info flowinfo reach mode reachmode flow info flowinfo condition analyse code analysecode current scope currentscope flow context flowcontext flow info flowinfo cst constant notaconstant flow context flowcontext conditional level conditionallevel process flow info flowinfo true flow info trueflowinfo flow info flowinfo inits when true initswhentrue copy compiler options compileroptions compiler options compileroptions current scope currentscope compiler options compileroptions is condition optimized false isconditionoptimizedfalse mode flow info flowinfo unreachable true flow info trueflowinfo set reach mode setreachmode flow info flowinfo unreachable dead is know dead code pattern isknowdeadcodepattern condition compiler options compileroptions report dead code in trivial if statement reportdeadcodeintrivialifstatement value if true valueiftrue complain if unreachable complainifunreachable true flow info trueflowinfo current scope currentscope initial comp laint level initialcomplaintlevel true init state index trueinitstateindex current scope currentscope method scope methodscope record initialization states recordinitializationstates true flow info trueflowinfo true flow info trueflowinfo value if true valueiftrue analyse code analysecode current scope currentscope flow context flowcontext true flow info trueflowinfo value if true valueiftrue checknpebyunboxing current scope currentscope flow context flowcontext true flow info trueflowinfo fetch status expire null checked field info expirenullcheckedfieldinfo if true null status iftruenullstatus compiler options compileroptions enable syntactic null analysis for fields enablesyntacticnullanalysisforfields if true null status iftruenullstatus value if true valueiftrue null status nullstatus true flow info trueflowinfo flow context flowcontext wipe meant value if true valueiftrue flow context flowcontext expire null checked field info expirenullcheckedfieldinfo process flow info flowinfo false flow info falseflowinfo flow info flowinfo inits when false initswhenfalse copy is condition optimized true isconditionoptimizedtrue mode flow info flowinfo unreachable false flow info falseflowinfo set reach mode setreachmode flow info flowinfo unreachable dead is know dead code pattern isknowdeadcodepattern condition compiler options compileroptions report dead code in trivial if statement reportdeadcodeintrivialifstatement value if false valueiffalse complain if unreachable complainifunreachable false flow info falseflowinfo current scope currentscope initial comp laint level initialcomplaintlevel false init state index falseinitstateindex current scope currentscope method scope methodscope record initialization states recordinitializationstates false flow info falseflowinfo false flow info falseflowinfo value if false valueiffalse analyse code analysecode current scope currentscope flow context flowcontext false flow info falseflowinfo value if false valueiffalse checknpebyunboxing current scope currentscope flow context flowcontext false flow info falseflowinfo flow context flowcontext conditional level conditionallevel merge initial izations initializations flow info flowinfo merged info mergedinfo is condition optimized true isconditionoptimizedtrue merged info mergedinfo true flow info trueflowinfo add potential initializations from addpotentialinitializationsfrom false flow info falseflowinfo if true null status iftruenullstatus null status nullstatus if true null status iftruenullstatus null status nullstatus value if true valueiftrue null status nullstatus true flow info trueflowinfo flow context flowcontext is condition optimized false isconditionoptimizedfalse merged info mergedinfo false flow info falseflowinfo add potential initializations from addpotentialinitializationsfrom true flow info trueflowinfo null status nullstatus value if false valueiffalse null status nullstatus false flow info falseflowinfo flow context flowcontext block meet conflicting requirements https bugs eclipse org analysis object object distinguish paths originating evaluation condition determine status entire conditional expression definite assignment analysis jls conditional expressions form expr expr check variable assigned entire conditional expression eval uates evaluates reach branch collect flow info flowinfo out come outcome evaluation condition support infos branches originating condition computing null status nullstatus compute null status computenullstatus true flow info trueflowinfo false flow info falseflowinfo flow context flowcontext support split branches structure expr path mark unreachable expr branch assigned merging branches yields assigned paths irrelevant enclosing cst optimized if true constant optimizediftrueconstant is value if true optimized true isvalueiftrueoptimizedtrue cst cst constant notaconstant cst boolean value booleanvalue is value if true optimized false isvalueiftrueoptimizedfalse cst cst constant notaconstant cst boolean value booleanvalue cst optimized if false constant optimizediffalseconstant is value if false optimized true isvalueiffalseoptimizedtrue cst cst constant notaconstant cst boolean value booleanvalue is value if false optimized false isvalueiffalseoptimizedfalse cst cst constant notaconstant cst boolean value booleanvalue unconditional flow info unconditionalflowinfo true flow towards true trueflowtowardstrue true flow info trueflowinfo inits when true initswhentrue unconditional copy unconditionalcopy unconditional flow info unconditionalflowinfo false flow towards true falseflowtowardstrue false flow info falseflowinfo inits when true initswhentrue unconditional copy unconditionalcopy unconditional flow info unconditionalflowinfo true flow towards false trueflowtowardsfalse true flow info trueflowinfo inits when false initswhenfalse unconditional inits unconditionalinits unconditional flow info unconditionalflowinfo false flow towards false falseflowtowardsfalse false flow info falseflowinfo inits when false initswhenfalse unconditional inits unconditionalinits is value if true optimized false isvalueiftrueoptimizedfalse true flow towards true trueflowtowardstrue set reach mode setreachmode flow info flowinfo unreachable dead is value if false optimized false isvalueiffalseoptimizedfalse false flow towards true falseflowtowardstrue set reach mode setreachmode flow info flowinfo unreachable dead is value if true optimized true isvalueiftrueoptimizedtrue true flow towards false trueflowtowardsfalse set reach mode setreachmode flow info flowinfo unreachable dead is value if false optimized true isvalueiffalseoptimizedtrue false flow towards false falseflowtowardsfalse set reach mode setreachmode flow info flowinfo unreachable dead merged info mergedinfo flow info flowinfo conditional true flow towards true trueflowtowardstrue merged with mergedwith false flow towards true falseflowtowardstrue true flow towards false trueflowtowardsfalse merged with mergedwith false flow towards false falseflowtowardsfalse merged init state index mergedinitstateindex current scope currentscope method scope methodscope record initialization states recordinitializationstates merged info mergedinfo merged info mergedinfo set reach mode setreachmode mode merged info mergedinfo checknpe block scope blockscope scope flow context flowcontext flow context flowcontext flow info flowinfo flow info flowinfo ttl for field check ttlforfieldcheck null status nullstatus flow info flowinfo scope problem reporter problemreporter expression null reference expressionnullreference null status nullstatus flow info flowinfo scope problem reporter problemreporter expression potential null reference expressionpotentialnullreference checking compute null status computenullstatus flow info flowinfo true branch info truebranchinfo flow info flowinfo false branch info falsebranchinfo flow context flowcontext flow context flowcontext merge null status nullstatus branches status pre computed if true null status iftruenullstatus if true null status iftruenullstatus value if true valueiftrue null status nullstatus true branch info truebranchinfo flow context flowcontext if false null status iffalsenullstatus value if false valueiffalse null status nullstatus false branch info falsebranchinfo flow context flowcontext if true null status iftruenullstatus if false null status iffalsenullstatus null status nullstatus if true null status iftruenullstatus true branch info truebranchinfo reach mode reachmode flow info flowinfo reachable null status nullstatus if false null status iffalsenullstatus false branch info falsebranchinfo reach mode reachmode flow info flowinfo reachable null status nullstatus if true null status iftruenullstatus chance https bugs eclipse org bugs bug cgi status combined status combinedstatus if true null status iftruenullstatus if false null status iffalsenullstatus combined status combinedstatus flow info flowinfo flow info flowinfo status flow info flowinfo combined status combinedstatus flow info flowinfo flow info flowinfo status flow info flowinfo combined status combinedstatus flow info flowinfo unknown flow info flowinfo unknown status flow info flowinfo unknown status null status nullstatus status code generation conditional param current scope currentscope org eclipse jdt internal compiler lookup block scope blockscope param code stream codestream org eclipse jdt internal compiler codegen code stream codestream param value required valuerequired generate code generatecode block scope blockscope current scope currentscope code stream codestream code stream codestream value required valuerequired code stream codestream position branch label branchlabel end if label endiflabel false label falselabel constant constant notaconstant value required valuerequired code stream codestream generate constant generateconstant constant implicit conversion implicitconversion code stream codestream record positions from recordpositionsfrom source start sourcestart constant cst condition optimized boolean constant optimizedbooleanconstant need true part needtruepart cst constant notaconstant cst boolean value booleanvalue need false part needfalsepart cst constant notaconstant cst boolean value booleanvalue end if label endiflabel branch label branchlabel code stream codestream generate code condition false label falselabel branch label branchlabel code stream codestream false label falselabel tag bits tagbits branch label branchlabel condition generate optimized boolean generateoptimizedboolean current scope currentscope code stream codestream false label falselabel cst constant notaconstant true init state index trueinitstateindex code stream codestream remove not definitely assigned variables removenotdefinitelyassignedvariables current scope currentscope true init state index trueinitstateindex code stream codestream add definitely assigned variables adddefinitelyassignedvariables current scope currentscope true init state index trueinitstateindex code generation need true part needtruepart value if true valueiftrue generate code generatecode current scope currentscope code stream codestream value required valuerequired need false part needfalsepart jump position code stream codestream position code stream codestream end if label endiflabel code stream codestream record positions from recordpositionsfrom position value if true valueiftrue source end sourceend tune code stream codestream stack size value required valuerequired resolved type resolvedtype type ids typeids type ids typeids code stream codestream decr stack size decrstacksize code stream codestream decr stack size decrstacksize need false part needfalsepart false init state index falseinitstateindex code stream codestream remove not definitely assigned variables removenotdefinitelyassignedvariables current scope currentscope false init state index falseinitstateindex code stream codestream add definitely assigned variables adddefinitelyassignedvariables current scope currentscope false init state index falseinitstateindex false label falselabel for ward reference count forwardreferencecount false label falselabel place value if false valueiffalse generate code generatecode current scope currentscope code stream codestream value required valuerequired value required valuerequired code stream codestream record expression type recordexpressiontype resolved type resolvedtype need true part needtruepart statement end if label endiflabel place loose local variable initial izations initializations local variable attributes merged init state index mergedinitstateindex code stream codestream remove not definitely assigned variables removenotdefinitelyassignedvariables current scope currentscope merged init state index mergedinitstateindex implicit conversion value required valuerequired code stream codestream generate implicit conversion generateimplicitconversion implicit conversion implicitconversion code stream codestream record positions from recordpositionsfrom source start sourcestart optimized code generation conditional generate optimized boolean generateoptimizedboolean block scope blockscope current scope currentscope code stream codestream code stream codestream branch label branchlabel true label truelabel branch label branchlabel false label falselabel value required valuerequired code stream codestream position constant constant constant notaconstant constant typeid value if true valueiftrue implicit conversion implicitconversion implicit conversion mask values value if false valueiffalse implicit conversion implicitconversion implicit conversion mask generate optimized boolean generateoptimizedboolean current scope currentscope code stream codestream true label truelabel false label falselabel value required valuerequired constant cst condition constant constant cond cst condcst condition optimized boolean constant optimizedbooleanconstant need true part needtruepart cst constant notaconstant cst boolean value booleanvalue cond cst condcst constant notaconstant cond cst condcst boolean value booleanvalue need false part needfalsepart cst constant notaconstant cst boolean value booleanvalue cond cst condcst constant notaconstant cond cst condcst boolean value booleanvalue branch label branchlabel internal false label internalfalselabel end if label endiflabel branch label branchlabel code stream codestream generate code condition need condition value needconditionvalue cst constant notaconstant cond cst condcst constant notaconstant condition generate optimized boolean generateoptimizedboolean current scope currentscope code stream codestream internal false label internalfalselabel branch label branchlabel code stream codestream need condition value needconditionvalue true init state index trueinitstateindex code stream codestream remove not definitely assigned variables removenotdefinitelyassignedvariables current scope currentscope true init state index trueinitstateindex code stream codestream add definitely assigned variables adddefinitelyassignedvariables current scope currentscope true init state index trueinitstateindex code generation need true part needtruepart value if true valueiftrue generate optimized boolean generateoptimizedboolean current scope currentscope code stream codestream true label truelabel false label falselabel value required valuerequired need false part needfalsepart jump jump end if jumpendif false label falselabel true label truelabel implicit falling cst optimized if true constant optimizediftrueconstant is value if true optimized true isvalueiftrueoptimizedtrue cst cst constant notaconstant cst boolean value booleanvalue jump branched is value if true optimized true isvalueiftrueoptimizedtrue jump end if jumpendif implicit falling true label truelabel cst optimized if true constant optimizediftrueconstant is value if true optimized false isvalueiftrueoptimizedfalse cst cst constant notaconstant cst boolean value booleanvalue jump branched is value if true optimized false isvalueiftrueoptimizedfalse jump end if jumpendif implicit fall occur position code stream codestream position code stream codestream end if label endiflabel code stream codestream record positions from recordpositionsfrom position value if true valueiftrue source end sourceend decrement code stream codestream stack size value if true valueiftrue consumed branch byte code bytecode need false part needfalsepart internal false label internalfalselabel place false init state index falseinitstateindex code stream codestream remove not definitely assigned variables removenotdefinitelyassignedvariables current scope currentscope false init state index falseinitstateindex code stream codestream add definitely assigned variables adddefinitelyassignedvariables current scope currentscope false init state index falseinitstateindex value if false valueiffalse generate optimized boolean generateoptimizedboolean current scope currentscope code stream codestream true label truelabel false label falselabel value required valuerequired statement end if label endiflabel place loose local variable initial izations initializations local variable attributes merged init state index mergedinitstateindex code stream codestream remove not definitely assigned variables removenotdefinitelyassignedvariables current scope currentscope merged init state index mergedinitstateindex implicit conversion values code stream codestream record positions from recordpositionsfrom source end sourceend null status nullstatus flow info flowinfo flow info flowinfo flow context flowcontext flow context flowcontext implicit conversion implicitconversion type ids typeids boxing flow info flowinfo null status nullstatus constant optimized boolean constant optimizedbooleanconstant optimized boolean constant optimizedbooleanconstant constant optimized boolean constant optimizedbooleanconstant string buffer stringbuffer print expression no parent hesis printexpressionnoparenthesis indent string buffer stringbuffer output nls condition print expression printexpression indent output append nls value if true valueiftrue print expression printexpression output append value if false valueiffalse print expression printexpression output type binding typebinding resolve type resolvetype block scope blockscope scope jls lookup environment lookupenvironment env scope environment source level sourcelevel scope compiler options compileroptions source level sourcelevel specifics source level sourcelevel class file constants classfileconstants jdk specifics source level sourcelevel class file constants classfileconstants jdk specifics expression context expressioncontext assignment context expression context expressioncontext invocation context value if true valueiftrue set expression context setexpressioncontext expression context expressioncontext value if true valueiftrue set expected type setexpectedtype expected type expectedtype value if false valueiffalse set expression context setexpressioncontext expression context expressioncontext value if false valueiffalse set expected type setexpectedtype expected type expectedtype constant constant notaconstant constant constant notaconstant type binding typebinding condition type conditiontype condition resolve type expecting resolvetypeexpecting scope type binding typebinding condition compute conversion computeconversion scope type binding typebinding condition type conditiontype check value if true valueiftrue cast expression castexpression value if true valueiftrue bits disable unnecessary cast check disableunnecessarycastcheck original value if true type originalvalueiftruetype value if true valueiftrue resolve type resolvetype scope check value if false valueiffalse cast expression castexpression value if false valueiffalse bits disable unnecessary cast check disableunnecessarycastcheck original value if false type originalvalueiffalsetype value if false valueiffalse resolve type resolvetype scope condition type conditiontype original value if true type originalvalueiftruetype original value if false type originalvalueiffalsetype original value if true type originalvalueiftruetype kind binding poly type original value if true type originalvalueiftruetype value if true valueiftrue resolve type resolvetype scope original value if false type originalvalueiffalsetype kind binding poly type original value if false type originalvalueiffalsetype value if false valueiffalse resolve type resolvetype scope original value if true type originalvalueiftruetype original value if true type originalvalueiftruetype is valid binding isvalidbinding resolved type resolvedtype original value if false type originalvalueiffalsetype original value if false type originalvalueiffalsetype is valid binding isvalidbinding resolved type resolvedtype is poly expression ispolyexpression expected type expectedtype expected type expectedtype is proper type ispropertype poly type binding polytypebinding resolved type resolvedtype compute conversions computeconversions scope expected type expectedtype expected type expectedtype type binding typebinding value if true type valueiftruetype original value if true type originalvalueiftruetype type binding typebinding value if false type valueiffalsetype original value if false type originalvalueiffalsetype specifics type binding typebinding not equals notequals value if true type valueiftruetype value if false type valueiffalsetype value if true type valueiftruetype is base type isbasetype value if false type valueiffalsetype is base type isbasetype bool base type basetype base type basetype bool integer value if true type valueiftruetype type binding typebinding value if false type valueiffalsetype boxing env compute boxing type computeboxingtype boxing value if false type valueiffalsetype bool integer value if false type valueiffalsetype type binding typebinding value if true type valueiftruetype boxing env compute boxing type computeboxingtype boxing value if true type valueiftruetype bool base type basetype non base type nonbasetype type binding typebinding unboxed if false type unboxediffalsetype value if false type valueiffalsetype is base type isbasetype value if false type valueiffalsetype env compute boxing type computeboxingtype value if false type valueiffalsetype value if true type valueiftruetype is numeric type isnumerictype unboxed if false type unboxediffalsetype is numeric type isnumerictype unboxing value if false type valueiffalsetype unboxing unboxed if false type unboxediffalsetype bool integer value if true type valueiftruetype type binding typebinding value if false type valueiffalsetype unboxing env compute boxing type computeboxingtype unboxing value if false type valueiffalsetype value if false type valueiffalsetype is base type isbasetype bool non base type nonbasetype base type basetype type binding typebinding unboxed if true type unboxediftruetype value if true type valueiftruetype is base type isbasetype value if true type valueiftruetype env compute boxing type computeboxingtype value if true type valueiftruetype unboxed if true type unboxediftruetype is numeric type isnumerictype value if false type valueiffalsetype is numeric type isnumerictype unboxing value if true type valueiftruetype unboxing unboxed if true type unboxediftruetype bool integer value if false type valueiffalsetype type binding typebinding value if true type valueiftruetype unboxing env compute boxing type computeboxingtype unboxing value if true type valueiftruetype bool non base type nonbasetype non base type nonbasetype type binding typebinding unboxed if true type unboxediftruetype env compute boxing type computeboxingtype value if true type valueiftruetype type binding typebinding unboxed if false type unboxediffalsetype env compute boxing type computeboxingtype value if false type valueiffalsetype unboxed if true type unboxediftruetype is numeric type isnumerictype unboxed if false type unboxediffalsetype is numeric type isnumerictype value if true type valueiftruetype unboxed if true type unboxediftruetype value if false type valueiffalsetype unboxed if false type unboxediffalsetype propagate constant value if true valueiftrue valueiffalse expression constant cond constant condconstant true constant trueconstant false constant falseconstant cond constant condconstant condition constant constant notaconstant true constant trueconstant value if true valueiftrue constant constant notaconstant false constant falseconstant value if false valueiffalse constant constant notaconstant terms constant expression propagate constant valueiftrue value if false valueiffalse receiver constant constant cond constant condconstant boolean value booleanvalue true constant trueconstant false constant falseconstant harmed implicit conversion type binding typebinding equals equals equalsequals value if true type valueiftruetype value if false type valueiffalsetype value if true valueiftrue compute conversion computeconversion scope value if true type valueiftruetype original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope value if false type valueiffalsetype original value if false type originalvalueiffalsetype type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding optimized if true constant optimizediftrueconstant value if true valueiftrue optimized boolean constant optimizedbooleanconstant optimized if false constant optimizediffalseconstant value if false valueiffalse optimized boolean constant optimizedbooleanconstant optimized if true constant optimizediftrueconstant constant notaconstant optimized if false constant optimizediffalseconstant constant notaconstant optimized if true constant optimizediftrueconstant boolean value booleanvalue optimized if false constant optimizediffalseconstant boolean value booleanvalue optimized boolean constant optimizedbooleanconstant optimized if true constant optimizediftrueconstant propagate optimized constant cond constant condconstant condition optimized boolean constant optimizedbooleanconstant constant notaconstant optimized boolean constant optimizedbooleanconstant cond constant condconstant boolean value booleanvalue optimized if true constant optimizediftrueconstant optimized if false constant optimizediffalseconstant resolved type resolvedtype null annotation matching nullannotationmatching more dangerous type moredangeroustype value if true type valueiftruetype value if false type valueiffalsetype numeric types value if true type valueiftruetype is numeric type isnumerictype value if false type valueiffalsetype is numeric type isnumerictype type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding type binding typebinding equals equals equalsequals value if false type valueiffalsetype type binding typebinding type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding type binding typebinding equals equals equalsequals value if false type valueiffalsetype type binding typebinding value if true valueiftrue compute conversion computeconversion scope type binding typebinding original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope type binding typebinding original value if false type originalvalueiffalsetype resolved type resolvedtype type binding typebinding constant rec iprocally reciprocally type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding type binding typebinding equals equals equalsequals value if false type valueiffalsetype type binding typebinding value if false valueiffalse is constant value of type assignable to type isconstantvalueoftypeassignabletotype value if false type valueiffalsetype value if true type valueiftruetype value if true valueiftrue compute conversion computeconversion scope value if true type valueiftruetype original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope value if true type valueiftruetype original value if false type originalvalueiffalsetype resolved type resolvedtype value if true type valueiftruetype type binding typebinding equals equals equalsequals value if false type valueiffalsetype type binding typebinding type binding typebinding equals equals equalsequals value if false type valueiffalsetype type binding typebinding type binding typebinding equals equals equalsequals value if false type valueiffalsetype type binding typebinding type binding typebinding equals equals equalsequals value if true type valueiftruetype type binding typebinding value if true valueiftrue is constant value of type assignable to type isconstantvalueoftypeassignabletotype value if true type valueiftruetype value if false type valueiffalsetype value if true valueiftrue compute conversion computeconversion scope value if false type valueiffalsetype original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope value if false type valueiffalsetype original value if false type originalvalueiffalsetype resolved type resolvedtype value if false type valueiffalsetype base type binding basetypebinding is narrowing isnarrowing value if true type valueiftruetype base type binding basetypebinding is narrowing isnarrowing value if false type valueiffalsetype value if true valueiftrue compute conversion computeconversion scope type binding typebinding original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope type binding typebinding original value if false type originalvalueiffalsetype resolved type resolvedtype type binding typebinding base type binding basetypebinding is narrowing isnarrowing value if true type valueiftruetype base type binding basetypebinding is narrowing isnarrowing value if false type valueiffalsetype value if true valueiftrue compute conversion computeconversion scope type binding typebinding original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope type binding typebinding original value if false type originalvalueiffalsetype resolved type resolvedtype type binding typebinding base type binding basetypebinding is narrowing isnarrowing value if true type valueiftruetype base type binding basetypebinding is narrowing isnarrowing value if false type valueiffalsetype value if true valueiftrue compute conversion computeconversion scope type binding typebinding original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope type binding typebinding original value if false type originalvalueiffalsetype resolved type resolvedtype type binding typebinding value if true valueiftrue compute conversion computeconversion scope type binding typebinding original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope type binding typebinding original value if false type originalvalueiffalsetype resolved type resolvedtype type binding typebinding type references tested value if true type valueiftruetype is base type isbasetype value if true type valueiftruetype type binding typebinding specifics value if true type valueiftruetype env compute boxing type computeboxingtype value if true type valueiftruetype scope problem reporter problemreporter conditional arguments incompatible types conditionalargumentsincompatibletypes value if true type valueiftruetype value if false type valueiffalsetype value if false type valueiffalsetype is base type isbasetype value if false type valueiffalsetype type binding typebinding specifics value if false type valueiffalsetype env compute boxing type computeboxingtype value if false type valueiffalsetype scope problem reporter problemreporter conditional arguments incompatible types conditionalargumentsincompatibletypes value if true type valueiftruetype value if false type valueiffalsetype specifics lub operand types exist type binding typebinding common type commontype value if true type valueiftruetype type binding typebinding common type commontype value if false type valueiffalsetype value if false type valueiffalsetype type binding typebinding common type commontype value if true type valueiftruetype common type commontype scope lower upper bound lowerupperbound type binding typebinding value if true type valueiftruetype value if false type valueiffalsetype common type commontype value if true valueiftrue compute conversion computeconversion scope common type commontype original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope common type commontype original value if false type originalvalueiffalsetype resolved type resolvedtype common type commontype capture scope source start sourcestart source end sourceend operand convertible value if false type valueiffalsetype is compatible with iscompatiblewith value if true type valueiftruetype value if true valueiftrue compute conversion computeconversion scope value if true type valueiftruetype original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope value if true type valueiftruetype original value if false type originalvalueiffalsetype resolved type resolvedtype value if true type valueiftruetype value if true type valueiftruetype is compatible with iscompatiblewith value if false type valueiffalsetype value if true valueiftrue compute conversion computeconversion scope value if false type valueiffalsetype original value if true type originalvalueiftruetype value if false valueiffalse compute conversion computeconversion scope value if false type valueiffalsetype original value if false type originalvalueiffalsetype resolved type resolvedtype value if false type valueiffalsetype scope problem reporter problemreporter conditional arguments incompatible types conditionalargumentsincompatibletypes value if true type valueiftruetype value if false type valueiffalsetype compute conversions computeconversions block scope blockscope scope type binding typebinding target type targettype original value if true type originalvalueiftruetype original value if true type originalvalueiftruetype is valid binding isvalidbinding value if true valueiftrue is constant value of type assignable to type isconstantvalueoftypeassignabletotype original value if true type originalvalueiftruetype target type targettype original value if true type originalvalueiftruetype is compatible with iscompatiblewith target type targettype value if true valueiftrue compute conversion computeconversion scope target type targettype original value if true type originalvalueiftruetype original value if true type originalvalueiftruetype needs unchecked conversion needsuncheckedconversion target type targettype scope problem reporter problemreporter unsafe type conversion unsafetypeconversion value if true valueiftrue original value if true type originalvalueiftruetype target type targettype value if true valueiftrue cast expression castexpression value if true valueiftrue bits ast node astnode unnecessary cast unnecessarycast ast node astnode disable unnecessary cast check disableunnecessarycastcheck cast expression castexpression check need for assigned cast checkneedforassignedcast scope target type targettype cast expression castexpression value if true valueiftrue is boxing compatible isboxingcompatible original value if true type originalvalueiftruetype target type targettype value if true valueiftrue scope value if true valueiftrue compute conversion computeconversion scope target type targettype original value if true type originalvalueiftruetype value if true valueiftrue cast expression castexpression value if true valueiftrue bits ast node astnode unnecessary cast unnecessarycast ast node astnode disable unnecessary cast check disableunnecessarycastcheck cast expression castexpression check need for assigned cast checkneedforassignedcast scope target type targettype cast expression castexpression value if true valueiftrue scope problem reporter problemreporter type mismatch error typemismatcherror original value if true type originalvalueiftruetype target type targettype value if true valueiftrue original value if false type originalvalueiffalsetype original value if false type originalvalueiffalsetype is valid binding isvalidbinding value if false valueiffalse is constant value of type assignable to type isconstantvalueoftypeassignabletotype original value if false type originalvalueiffalsetype target type targettype original value if false type originalvalueiffalsetype is compatible with iscompatiblewith target type targettype value if false valueiffalse compute conversion computeconversion scope target type targettype original value if false type originalvalueiffalsetype original value if false type originalvalueiffalsetype needs unchecked conversion needsuncheckedconversion target type targettype scope problem reporter problemreporter unsafe type conversion unsafetypeconversion value if false valueiffalse original value if false type originalvalueiffalsetype target type targettype value if false valueiffalse cast expression castexpression value if false valueiffalse bits ast node astnode unnecessary cast unnecessarycast ast node astnode disable unnecessary cast check disableunnecessarycastcheck cast expression castexpression check need for assigned cast checkneedforassignedcast scope target type targettype cast expression castexpression value if false valueiffalse is boxing compatible isboxingcompatible original value if false type originalvalueiffalsetype target type targettype value if false valueiffalse scope value if false valueiffalse compute conversion computeconversion scope target type targettype original value if false type originalvalueiffalsetype value if false valueiffalse cast expression castexpression value if false valueiffalse bits ast node astnode unnecessary cast unnecessarycast ast node astnode disable unnecessary cast check disableunnecessarycastcheck cast expression castexpression check need for assigned cast checkneedforassignedcast scope target type targettype cast expression castexpression value if false valueiffalse scope problem reporter problemreporter type mismatch error typemismatcherror original value if false type originalvalueiffalsetype target type targettype value if false valueiffalse set expected type setexpectedtype type binding typebinding expected type expectedtype expected type expectedtype expected type expectedtype set expression context setexpressioncontext expression context expressioncontext context expression context expressioncontext context expression context expressioncontext get expression context getexpressioncontext expression context expressioncontext override expression get poly expressions getpolyexpressions expression true polys truepolys value if true valueiftrue get poly expressions getpolyexpressions expression false polys falsepolys value if false valueiffalse get poly expressions getpolyexpressions true polys truepolys length false polys falsepolys false polys falsepolys length true polys truepolys expression all polys allpolys expression true polys truepolys length false polys falsepolys length system arraycopy true polys truepolys all polys allpolys true polys truepolys length system arraycopy false polys falsepolys all polys allpolys true polys truepolys length false polys falsepolys length all polys allpolys is per tinent to applicability ispertinenttoapplicability type binding typebinding target type targettype method binding methodbinding method value if true valueiftrue is per tinent to applicability ispertinenttoapplicability target type targettype method value if false valueiffalse is per tinent to applicability ispertinenttoapplicability target type targettype method override is potentially compatible with ispotentiallycompatiblewith type binding typebinding target type targettype scope scope value if true valueiftrue is potentially compatible with ispotentiallycompatiblewith target type targettype scope value if false valueiffalse is potentially compatible with ispotentiallycompatiblewith target type targettype scope override is functional type isfunctionaltype arm functional type require functional target value if true valueiftrue is functional type isfunctionaltype value if false valueiffalse is functional type isfunctionaltype is poly expression ispolyexpression unsupported operation exception unsupportedoperationexception specifics is poly expression ispolyexpression expression context expressioncontext assignment context expression context expressioncontext invocation context resolution error original value if true type originalvalueiftruetype original value if false type originalvalueiffalsetype value if true valueiftrue is poly expression ispolyexpression value if false valueiffalse is poly expression ispolyexpression operands produce primitives boxed primitives original value if true type originalvalueiftruetype is base type isbasetype original value if true type originalvalueiftruetype type ids typeids java lang byte javalangbyte original value if true type originalvalueiftruetype type ids typeids java lang boolean javalangboolean original value if false type originalvalueiffalsetype is base type isbasetype original value if false type originalvalueiffalsetype type ids typeids java lang byte javalangbyte original value if false type originalvalueiffalsetype type ids typeids java lang boolean javalangboolean clause method type prior instantiation check is poly expression ispolyexpression is compatible with iscompatiblewith type binding typebinding left scope scope is poly expression ispolyexpression value if true valueiftrue is compatible with iscompatiblewith left scope value if false valueiffalse is compatible with iscompatiblewith left scope is compatible with iscompatiblewith left scope override is boxing compatible with isboxingcompatiblewith type binding typebinding target type targettype scope scope note compatibility check failed arm reached is poly expression ispolyexpression value if true valueiftrue is compatible with iscompatiblewith target type targettype scope value if true valueiftrue is boxing compatible with isboxingcompatiblewith target type targettype scope value if false valueiffalse is compatible with iscompatiblewith target type targettype scope value if false valueiffalse is boxing compatible with isboxingcompatiblewith target type targettype scope is boxing compatible with isboxingcompatiblewith target type targettype scope s is more specific sismorespecific type binding typebinding type binding typebinding scope scope s is more specific sismorespecific scope is poly expression ispolyexpression value if true valueiftrue s is more specific sismorespecific scope value if false valueiffalse s is more specific sismorespecific scope traverse ast visitor astvisitor visitor block scope blockscope scope visitor visit scope condition traverse visitor scope value if true valueiftrue traverse visitor scope value if false valueiffalse traverse visitor scope visitor end visit endvisit scope